docker ps -qa


docker rm $(docker ps -qa)









To avoid creating unnecessary garbage in the first place it is also possible to automatically remove the container when it exits by using docker run with the --rm option e.g.











///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

nano docker_cleanup.sh














#!/bin/bash

# Remove all containers (running and stopped)
echo "Removing all containers..."
sudo docker rm -f $(sudo docker ps -aq)

# Remove all images
echo "Removing all images..."
sudo docker rmi -f $(sudo docker images -q)

# Remove all volumes
echo "Removing all volumes..."
sudo docker volume rm $(sudo docker volume ls -q)

# Remove all networks (except default)
echo "Removing all networks..."
sudo docker network rm $(sudo docker network ls -q)

# Remove all unused resources (containers, images, volumes, and networks)
echo "Pruning unused resources..."
sudo docker system prune -a --volumes -f

# Remove all dangling images
echo "Removing dangling images..."
sudo docker image prune -f

# Clean build cache
echo "Cleaning build cache..."
sudo docker builder prune -f

# Force remove containers and images
echo "Force removing all containers and images..."
sudo docker rm -f $(sudo docker ps -aq) && sudo docker rmi -f $(sudo docker images -q)

# Remove all containers, volumes, images, and networks in one go
echo "Removing all containers, volumes, images, and networks in one go..."
sudo docker rm -f $(sudo docker ps -aq)
sudo docker rmi -f $(sudo docker images -q)
sudo docker volume rm $(sudo docker volume ls -q)
sudo docker network rm $(sudo docker network ls -q)

# EXTREME: Remove Docker data directory (Be careful with this one)
# echo "Removing Docker data directory (EXTREME)..."
# sudo rm -rf /var/lib/docker

# Verification: Check if any containers are left
echo "Checking if any containers are left..."
sudo docker ps -a

# Verification: Check if any images are left
echo "Checking if any images are left..."
sudo docker images

# Verification: Check if any volumes are left
echo "Checking if any volumes are left..."
sudo docker volume ls

# Verification: Check if any networks are left
echo "Checking if any networks are left..."
sudo docker network ls

echo "Docker cleanup completed!"

















chmod +x docker_cleanup.sh



./docker_cleanup.sh




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#!/bin/bash

# Stop all running containers
echo "Stopping all containers..."
sudo docker stop $(sudo docker ps -aq)

# Remove all containers
echo "Removing all containers..."
sudo docker rm -f $(sudo docker ps -aq)

# Remove all images
echo "Removing all images..."
sudo docker rmi -f $(sudo docker images -aq)

# Remove all volumes
echo "Removing all volumes..."
sudo docker volume rm $(sudo docker volume ls -q)

# Remove all networks (excluding default ones: bridge, host, none)
echo "Removing all networks..."
sudo docker network rm $(sudo docker network ls -q)

# Prune unused volumes (optional step, but can clean up unused ones)
echo "Pruning unused volumes..."
sudo docker volume prune -f

# Remove all plugins
echo "Removing all plugins..."
sudo docker plugin list -q | xargs -I {} sudo docker plugin rm -f {}

# Prune system resources
echo "Pruning system..."
sudo docker system prune -a -f --volumes

echo "All Docker containers, images, volumes, networks, and plugins have been removed."



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





#!/bin/bash

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
RESET='\033[0m'  # Reset to default color

# Function to display colored text
print_header() {
    echo -e "${CYAN}==============================================${RESET}"
    echo -e "${CYAN}            DOCKER CLEANUP SCRIPT            ${RESET}"
    echo -e "${CYAN}==============================================${RESET}"
}

# Function to print removal status
print_status() {
    echo -e "${GREEN}$1${RESET}"
}

# Start Cleanup Process
print_header

# Stop and remove all containers
print_status "Stopping and removing all containers..."
sudo docker container stop $(sudo docker container ls -aq) > /dev/null 2>&1
sudo docker container rm $(sudo docker container ls -aq) > /dev/null 2>&1

# Remove all images
print_status "Removing all Docker images..."
sudo docker image rm $(sudo docker image ls -aq) > /dev/null 2>&1

# Remove all volumes
print_status "Removing all Docker volumes..."
sudo docker volume rm $(sudo docker volume ls -q) > /dev/null 2>&1

# Remove all networks
print_status "Removing all Docker networks..."
sudo docker network rm $(sudo docker network ls -q) > /dev/null 2>&1

# Remove all plugins
print_status "Removing all Docker plugins..."
sudo docker plugin disable $(sudo docker plugin ls -q) > /dev/null 2>&1
sudo docker plugin rm $(sudo docker plugin ls -q) > /dev/null 2>&1

# Perform Docker system prune
print_status "Pruning Docker system..."
sudo docker system prune -af > /dev/null 2>&1

# Verification after cleanup
print_status "${MAGENTA}Verification after cleanup:${RESET}"

# List containers
print_status "Containers:"
sudo docker ps --all

# List images
print_status "Images:"
sudo docker images

# List volumes
print_status "Volumes:"
sudo docker volume ls

# List networks
print_status "Networks:"
sudo docker network ls

# List plugins
print_status "Plugins:"
sudo docker plugin ls

# System prune result
print_status "System Prune Result:"
sudo docker system prune -af

print_status "${GREEN}All Docker containers, images, volumes, networks, and plugins have been removed.${RESET}"

# Celebration emoji
echo -e "${CYAN}ðŸŽ‰ðŸŽ‰ðŸŽ‰ Cleanup completed successfully! ðŸŽ‰ðŸŽ‰ðŸŽ‰${RESET}"




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




#!/bin/bash

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
RESET='\033[0m'  # Reset to default color

# Function to display colored text
print_header() {
    echo -e "${CYAN}==============================================${RESET}"
    echo -e "${CYAN}            DOCKER CLEANUP SCRIPT            ${RESET}"
    echo -e "${CYAN}==============================================${RESET}"
}

# Function to print status with a spinner
spinner() {
    local pid=$!
    local spinstr='|/-\\'
    while kill -0 $pid 2>/dev/null; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        spinstr=$temp${spinstr%"$temp"}
        sleep 0.1
        printf "\r"
    done
    printf "    \r"  # Clear the spinner
}

# Function to print removal status with spinner
print_status() {
    echo -e "${GREEN}$1${RESET}"
}

# Start Cleanup Process
print_header

# Stop and remove all containers with spinner
print_status "Stopping and removing all containers..."
sudo docker container stop $(sudo docker container ls -aq) > /dev/null 2>&1 &
spinner
sudo docker container rm $(sudo docker container ls -aq) > /dev/null 2>&1 &
spinner

# Remove all images with spinner
print_status "Removing all Docker images..."
sudo docker image rm $(sudo docker image ls -aq) > /dev/null 2>&1 &
spinner

# Remove all volumes with spinner
print_status "Removing all Docker volumes..."
sudo docker volume rm $(sudo docker volume ls -q) > /dev/null 2>&1 &
spinner

# Remove all networks with spinner
print_status "Removing all Docker networks..."
sudo docker network rm $(sudo docker network ls -q) > /dev/null 2>&1 &
spinner

# Remove all plugins with spinner
print_status "Removing all Docker plugins..."
sudo docker plugin disable $(sudo docker plugin ls -q) > /dev/null 2>&1 &
spinner
sudo docker plugin rm $(sudo docker plugin ls -q) > /dev/null 2>&1 &
spinner

# Perform Docker system prune with spinner
print_status "Pruning Docker system..."
sudo docker system prune -af > /dev/null 2>&1 &
spinner

# Verification after cleanup
print_status "${MAGENTA}Verification after cleanup:${RESET}"

# List containers
print_status "Containers:"
sudo docker ps --all

# List images
print_status "Images:"
sudo docker images

# List volumes
print_status "Volumes:"
sudo docker volume ls

# List networks
print_status "Networks:"
sudo docker network ls

# List plugins
print_status "Plugins:"
sudo docker plugin ls

# System prune result
print_status "System Prune Result:"
sudo docker system prune -af

print_status "${GREEN}All Docker containers, images, volumes, networks, and plugins have been removed.${RESET}"

# Celebration emoji
echo -e "${CYAN}ðŸŽ‰ðŸŽ‰ðŸŽ‰ Cleanup completed successfully! ðŸŽ‰ðŸŽ‰ðŸŽ‰${RESET}"





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





