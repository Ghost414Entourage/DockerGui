Build a Docker image that runs basic X11 GUI apps like xlogo using x11-apps.

üß± Abstracted Dockerfile (for x11-apps):
# File: Dockerfile
FROM debian:stretch-slim

RUN apt-get update && DEBIAN_FRONTEND=noninteractive \
    apt-get install -y --no-install-recommends \
    x11-apps && \
    rm -rf /var/lib/apt/lists/*

CMD ["xlogo"]

‚úÖ Step-by-Step on Ubuntu Host:
Create a directory and Dockerfile:

mkdir -p ~/docker/x11-apps
cd ~/docker/x11-apps
nano Dockerfile

Paste the Dockerfile contents above and save.

Build the image:
docker build -t x11-apps .
Confirm the image is built:
docker image ls

You should see something like:

REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
x11-apps      latest    77721f2519a0   16 seconds ago   72.4MB

üß™ To Run It (Graphical Output with X11):

To run GUI apps like xlogo on your Ubuntu host, you need X11 forwarding.

If running directly on Ubuntu desktop:

xhost +local:docker

docker run --rm -e DISPLAY=$DISPLAY \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  x11-apps
If you're using Wayland (Ubuntu 22.04+ by default):

Add this to fallback to XWayland:

xhost +si:localuser:root








nano ~/docker/x11-apps/xlogoV1.sh


#!/bin/bash

# Allow local (non-network) connections to the X server
xhost +local:

# Run the Docker container with access to the host X11 socket
docker run --rm \
    -e DISPLAY=unix$DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
    x11-apps

# Revoke local access permissions to the X server
xhost -local:



chmod +x ~/docker/x11-apps/xlogoV1.sh



~/docker/x11-apps/xlogoV1.sh







//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



sudo apt-get install -y xauth



nano ~/docker/x11-apps/xlogoSecure.sh



#!/bin/bash

# Directory to mount X11 socket and .Xauthority
XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.docker.xauth

# Create .Xauthority-compatible file if not already created
if [ ! -f $XAUTH ]; then
    touch $XAUTH
    xauth nlist "$DISPLAY" | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -
    echo "[+] Created temporary X authority file at $XAUTH"
fi

# Run the Docker container using secure X11 cookie authentication
docker run --rm \
    -e DISPLAY=$DISPLAY \
    -e XAUTHORITY=/root/.Xauthority \
    -v $XSOCK:$XSOCK:ro \
    -v $XAUTH:/root/.Xauthority:ro \
    x11-apps






chmod +x ~/docker/x11-apps/xlogoSecure.sh


~/docker/x11-apps/xlogoSecure.sh




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



‚úÖ xlogoV2.sh ‚Äì Secure, Hostname-Agnostic X11 Access
#!/bin/bash

# Defaults
XSOCK="/tmp/.X11-unix"
XAUTH="${XAUTHORITY:-$HOME/.Xauthority}"
DOCKER_XAUTH="$XAUTH.docker"

# Recreate wildcard .Xauthority each time (due to session regeneration)
cp --preserve=all "$XAUTH" "$DOCKER_XAUTH" || {
    echo "[-] Could not copy $XAUTH"
    exit 1
}
xauth nlist "$DISPLAY" | sed -e 's/^..../ffff/' | xauth -f "$DOCKER_XAUTH" nmerge - || {
    echo "[-] Failed to merge X authority cookie"
    exit 1
}

# Run the container using wildcarded authority
docker run --rm \
    -e DISPLAY="unix$DISPLAY" \
    -v "$XSOCK:$XSOCK:ro" \
    -e XAUTHORITY="$DOCKER_XAUTH" \
    -v "$DOCKER_XAUTH:$DOCKER_XAUTH:ro" \
    x11-apps
üß™ How to Use
Save this script as xlogoV2.sh.
Make it executable:
chmod +x xlogoV2.sh
Run it:
./xlogoV2.sh
üîç Notes
sed 's/^..../ffff/' replaces the hostname hash in the cookie with a wildcard (ffff) so the container hostname doesn't matter.
No need to -h $(hostname) anymore.
Fully local, no external access is enabled.
Still works fine with XWayland if $DISPLAY and .Xauthority are valid.
